---
import type { GetStaticPaths } from "astro";
import Layout from "@/layouts/Layout.astro";
import PokemonCard from "@/components/pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@/interfaces/pokemon-list-response.interface";
import Title from "@/components/shared/Title.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await response.json()) as PokemonListResponse;

  return results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const pokemonId = url.split("/").at(-2);

const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${pokemonId}.ogg`;
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonId}.png`;
---

<Layout
  title={`Pokemon - #${pokemonId} ${name}`}
  description={`Información sobre el pokemon ${name}`}
  image={imageUrl}
>
  <section class="mt-10 mx-10 flex flex-col justify-center items-center">
    <div class="flex flex-row">
      <div>
        <button class="text-blue-500" onclick="history.back()">Volver</button>
        <Title>{name}</Title>
      </div>

      <button
        id="btn-favorite"
        class="ml-4 hover:animate-pulse"
        data-name={name}
        data-id={pokemonId}
      >
        <Icon data-outline name="heart-outline" size={50} />
        <Icon data-full class="hidden" name="heart-full" size={50} />
      </button>
    </div>
    <PokemonCard name={name} url={url} isBig />

    <audio controls class="mt-5">
      <source src={audioSrc} type="audio/ogg" />
    </audio>
  </section>
</Layout>

<script>
  // document.addEventListener("astro:before-preparation", () => {
  //   console.log("before preparation");
  // });

  import type { FavoritePokemon } from "@/interfaces/favorite-pokemon.interface";

  // document.addEventListener("astro:after-preparation", () => {
  //   console.log("after preparation");
  // });

  // document.addEventListener("astro:before-swap", () => {
  //   console.log("before swap");
  // });

  // document.addEventListener("astro:after-swap", () => {
  //   console.log("after swap");
  // });

  // document.addEventListener("astro:page-load", () => {
  //   console.log("page load");
  // });

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem("favoritePokemons") ?? "[]"
    );

    const btnFavorite = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!btnFavorite) return;

    const name = btnFavorite.dataset.name ?? "";
    const id = btnFavorite.dataset.id ?? "";

    const heartOutline = btnFavorite.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartFull = btnFavorite.querySelector("[data-full]") as HTMLElement;

    const isFavorite = favoritePokemons.some(
      (pokemon) => pokemon.name === name
    );

    if (isFavorite) {
      heartOutline.classList.add("hidden");
      heartFull.classList.remove("hidden");
    }

    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some(
        (pokemon) => pokemon.name === name
      );

      if (isFavorite) {
        favoritePokemons = favoritePokemons.filter(
          (pokemon) => pokemon.name !== name
        );
      } else {
        favoritePokemons.push({ id: Number(id), name });
      }

      localStorage.setItem(
        "favoritePokemons",
        JSON.stringify(favoritePokemons)
      );
    };

    btnFavorite.addEventListener("click", () => {
      heartOutline.classList.toggle("hidden");
      heartFull.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>
